---
title: "Homework 4 Fish"
format: pdf
editor: visual
---

```{r}
#| include: false
library(tidyverse)
```


## Task 1: Conceptual Questions



### Question 1

* The purpose of  `lapply()` is to apply a function to a list and have the output of that function be in a list. The equivalent purrr function is `map2()`. The 2 signifies the output being in a list.

### Question 2

* To do this code and to specify `method = "kendall"`, we would need to run the following code" `lapply(my_list, cor, method = "kendall")`. This is due to the "..." in the `lapply` function.

### Question 3

* The 2 advantages to using purrr functions instead of BaseR apply family are that the purrr functions can guarantee the output that you want to happen, whereas base R cannot always do that (ex: `sapply()` may not simplify, whereas `map_chr()` will guarantee a character response). In addition, more setting are added to the purrr functions (like `safely`, `quietly`, etc.) that allow for more smooth and intentional coding.f

### Question 4

* A side effect function is a function that does something with the data but does not continue outputting or "dragging down" the data. For example, `plot()` makes a plot of the data that is input into the function, but nothing is actually **done** to the data as a result. The data is also not able to be accessed through the `plot` function either (unless `invisible` is used).


### Question 5

* You can name a variable `sd` in a function and not cause issues with the `sd` function due to that variable being a local variable. This means that this variable is not actually assigned a value that remains there until changed; it is a variable that essentially acts as a storage holder of a value until the function is done running. That implies that the `sd` function will not be overwritten in this case.


## Task 2: Writing R Functions

### Question 1

For this question, we will write a function that computes the RMSE of a response vectors versus a prediction vector, allowing for the mean function to take on potential NA values.

```{r}
getRMSE <- function(resp, pred,...){
  diffs_s2 <- (resp - pred) ** 2
  mean_diffs <- mean(diffs_s2, ...)
  rmse <- sqrt(mean_diffs)
  
  return(rmse)
}
```


### Question 2

Next, we will run the following code (given) to do some evaluations using the RMSE function built above.

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
```

First, we will test the RMSE function using this data.

```{r}
getRMSE(resp, pred)
```

This gave one value, which seemingly is the correct RMSE for these vectors.

Next, we will repeat this after replacing two of the response values with missing values.

```{r}
resp[1] <- resp[2] <- NA_real_

getRMSE(resp, pred)
getRMSE(resp, pred, na.rm = T)
```

The values given for with and without specification for these NA values is as we would expect: since the mean is NA, the RMSE is NA. Once told to "ignore" the NA values, we got a slightly different RMSE value than originally computed.

### Question 3

Next, we will create a function that calculates the MAE for given prediction and response vectors (with the same ability to control for NA values within the `mean` function as before).

```{r}
getMAE <- function(resp, pred, ...){
  abs_diff <- abs(resp - pred)
  mae <- mean(abs_diff, ...)
  
  return(mae)
}
```


### Question 4

Next, we will run the following code (given) to use the MAE function defined above.

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
```

To test our function, we will run the same code as above (test as is as well as change two values to NA and specify vs. not specify).

```{r}
getMAE(resp, pred)
```

When we run the function on the code provided as is, we get a value that is seemingly "correct".

```{r}
resp[1] <- resp[2] <- NA_real_

getMAE(resp, pred)
getMAE(resp, pred, na.rm= T)
```

The same pattern occurred with the MAE calculation as the RMSE calculation in Question 2.

### Question 5

Next, we will create a wrapper function to get either (or both) metrics with one single function call. We will call the functions written above as well as utilize the ability to specify which metrics we would like to have been calculated. We will also take more care in defining the function by ensuring that we are passed the correct data.

```{r}
metrics <- function(resp, pred, calc = "both", ...){
  
  if (!is.atomic(resp) | !is.numeric(resp)) {
    stop("Input 'resp' must be a numeric, atomic vector.")
  }
  
  if (!is.atomic(pred) | !is.numeric(pred)) {
    stop("Input 'pred' must be a numeric, atomic vector.")
  }
  
  rmse <- getRMSE(resp, pred, ...)
  mae <- getMAE(resp, pred, ...)
  
  if (calc == "RMSE"){
    return(c("RMSE" = rmse))
  } else if (calc == "MAE"){
    return(c("MAE" = mae))
  } else if (calc == "both"){
    return(c("RMSE" = rmse, "MAE" = mae))
  }
}
```

### Question 6

Lastly, we will run the following code once more to use the wrapper function written above.

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
```

Now, we will use these defined vectors to test the wrapper function. We will do this a few times to test all combinations of metrics we could want.

```{r}
metrics(resp, pred, calc = "RMSE")
metrics(resp, pred, calc = "MAE")
metrics(resp, pred, calc = "both")
```

Now we will repeat this with the replacement of two of the response values with `NA_real_`.

```{r}
resp[1] <- resp[2] <- NA_real_

metrics(resp, pred, calc = "both")
metrics(resp, pred, calc = "both", na.rm = T)
```

Lastly, we will pas this function incorrect data to see if the appropriate error message occurs.

```{r}
#| error: true
library(palmerpenguins)

metrics(penguins, pred)
metrics(resp, penguins)
```

## Task 3: Querying an API and a Tidy-Style Function

For this section, you’ll connect to the news API here: newsapi.org. You’ll need to go to register for a key at
that web site!


### Question 1

First, we will use `GET()` to store some information from the news API into R. We will be storing information on sports that have come up from the US on 6-11-25.

```{r}
library(httr)
library(jsonlite)

key <- "423f0afd2f6e4e2682bc1aace8a276aa"
topic <- "sports"
url_q2 <- "https://newsapi.org/v2/everything"

news_data <- GET(url_q2, query = list(
  q = topic,
  from = "2025-06-11",
  sortBy = "publishedAt",
  apiKey = key))
```


### Question 2

Now, we will parse what is returned to find the data frame that has the article information in it. We will also check the content and ensure that the first column is a list column.

```{r}
parsed <- fromJSON(rawToChar(news_data$content))
article_info <- as_tibble(parsed$articles)
tib <- as_tibble(article_info)
tib
str(tib$source)
```

We can see above that the data has been parsed and has the article information in it. We can also see that the first column is a list column.


### Question 3

Lastly, we will write a function that lets the user query the API when using the function. We will make the inputs to the function be the title/subject, a time period, and an API key.

```{r}
get_news <- function(subject, start_date, key) {
  
  url <- "https://newsapi.org/v2/everything"
  
  news_info <- GET(url, query = list(
    q = subject,
    from = start_date,
    sortBy = "publishedAt",
    apiKey = key))
  
  parsed <- fromJSON(rawToChar(news_info$content))
  article_info <- as_tibble(parsed$articles)
  tib <- as_tibble(article_info)
  
  return(tib)
}
```

Now, we will test this function on the gamestop title for past 6-17-2025.

```{r}
key <- "423f0afd2f6e4e2682bc1aace8a276aa"

get_news("gamestop", "2025-06-17", key)
```


